import os
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
import base64
from getpass import getpass
from cryptography.fernet import InvalidToken

# Función para derivar clave de la contraseña con salt
def derive_key_from_password(password, salt):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

# Función para desencriptar los archivos en una carpeta
def desencriptar_carpeta():
    # Solicitar la ruta de la carpeta al usuario
    ruta_carpeta = input("Introduce la ruta de la carpeta a desencriptar: ")

    # Verificar si la carpeta existe
    if not os.path.isdir(ruta_carpeta):
        print("La ruta proporcionada no es una carpeta válida.")
        return

    # Verificar que el archivo salt.key existe
    salt_file_path = os.path.join(ruta_carpeta, "salt.key")
    if not os.path.isfile(salt_file_path):
        print(f"No se encontró el archivo salt.key en {ruta_carpeta}.")
        return

    # Leer el salt del archivo
    with open(salt_file_path, "rb") as salt_file:
        salt = salt_file.read()

    # Solicitar contraseña al usuario
    password = getpass("Introduce la contraseña para desencriptar los archivos: ")
    key = derive_key_from_password(password, salt)

    # Obtener lista de archivos en la carpeta
    files = []
    for file in os.listdir(ruta_carpeta):
        file_path = os.path.join(ruta_carpeta, file)
        if os.path.isfile(file_path) and file != "salt.key":
            files.append(file_path)

    # Desencriptar los archivos
    for file in files:
        try:
            with open(file, "rb") as thefile:
                contents = thefile.read()
            contents_decrypted = Fernet(key).decrypt(contents)
            with open(file, "wb") as thefile:
                thefile.write(contents_decrypted)
            print(f"Archivo desencriptado: {file}")
        except InvalidToken:
            print(f"Contraseña incorrecta o archivo corrupto: {file}")
            return

    print("Todos los archivos en la carpeta han sido desencriptados con éxito.")

# Llamar a la función
if __name__ == "__main__":
    desencriptar_carpeta()
